package com.example.grignotte_back.springboot.controller;

import com.example.grignotte_back.springboot.repository.UserRepository;
import com.example.grignotte_back.springboot.model.User;

import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Tag(name = "user", description = "User methods")
    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (
            @RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        n.setSurname("petitbout");
        userRepository.save(n);
        return "Saved";
    }

    @Tag(name = "user", description = "User methods")
    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @Tag(name = "user", description = "User methods")
    @GetMapping(path="/id")
    public @ResponseBody User getUser(@Parameter(
                    description = "ID of user to be retrieved",
                    required = true)
                    @PathVariable int userId
    ) {
        // This returns a JSON or XML with user's information
        User user = userRepository.findById(userId).orElseThrow(() -> new RuntimeException("User id not found - " + userId));
        return user;
    }

    @ApiResponses({
            @ApiResponse(responseCode = "200", content = { @Content(mediaType = "application/json",
                    schema = @Schema(implementation = User.class)) }),
            @ApiResponse(responseCode = "404", description = "User not found",
                    content = @Content) })
    @Tag(name = "user", description = "User methods")
    @DeleteMapping(path="/users/{userId}")
    public String deleteUser(@PathVariable int userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User id not found - " + userId));
        userRepository.delete(user);
        return "Deleted user with id: " + userId;
    }
}